name: Deploy to Vercel

on:
  push:
    branches:
      - main  # or your production branch
# Add this permissions block at the top level of your workflow
permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Link Project
        run: vercel link --yes --project=${{ secrets.VERCEL_PROJECT_NAME }} --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }}
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }}

      - name: Deploy on Vercel
        run: |
          VERCEL_URL=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_SCOPE }})
          echo "url=$VERCEL_URL >> $GITHUB_OUTPUT

      - name: Create GitHub Deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.info('Creating GitHub deployment!');
            const { owner, repo } = context.repo;
            const sha = context.sha;

            // Function to wait for in-progress deployments to complete
            async function waitForDeployments() {
              while (true) {
                const { data: deployments } = await github.rest.repos.listDeployments({
                  owner,
                  repo,
                  sha
                });

                const inProgressDeployments = deployments.filter(d => d.state === 'in_progress');
                if (inProgressDeployments.length === 0) {
                  break;
                }

                core.info('Waiting for in-progress deployments to complete...');
                await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds
              }
            }

            // Wait for any in-progress deployments to complete
            core.info("Starting Deployment Message!");
            await waitForDeployments();

            // Create new deployment
              core.info("Creating New Deployment!");
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [] // Skip status checks
            });

            // Create deployment status
            core.info(`Creating Deployment Status for ${{ steps.deploy.outputs.url }}`);
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: `${{ steps.deploy.outputs.url }}`,
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
              description: 'Vercel Deployment finished successfully.'
            });